import matplotlib.pyplot as plt
import numpy as np
X = np.array([16.09, 15.56, 15.85, 15.69, 15.01])
y = np.array([17.62, 14.88, 16.32, 16.28, 14.96])
plt.scatter(X, y)
plt.xlabel('X: Temperature yesterday')
plt.ylabel('Y: Temperature today')
plt.title('Linear regression')
plt.show()
b = 0
w = 0.5
sum_of_squares = np.sum((y - (b + w * X)) ** 2)
print(sum_of_squares)
b = 1
w = 1
sum_of_squares = np.sum((y - (b + w * X)) ** 2)
print(sum_of_squares)
def compute_gradients(X, y, w, b):
N = len(y)
y_pred = w * X + b
dw = (-2/N) * np.sum(X * (y - y_pred))
db = (-2/N) * np.sum(y - y_pred)
return dw, db
def rmse(y_true, y_pred):
return np.sqrt(np.mean((y_true - y_pred) ** 2))
def predict(X, w, b):
return w * X + b
w, b = 0.0, 0.0
alpha = 0.001
epochs = 100
losses = []
for epoch in range(epochs):
dw, db = compute_gradients(X, y, w, b)
w -= alpha * dw
b -= alpha * db
loss = rmse(y, predict(X, w, b))
if epoch % 10 == 0:
print(f'Epoch {epoch}, Loss: {loss:.4f}, w: {w:.4f}, b: {b:.4f}')
losses.append(loss)
plt.scatter(X, y, label='Data points')
plt.plot(X, predict(X, w, b), color='red', label='Fitted line')
plt.xlabel('X: Temperature yesterday')
plt.ylabel('Y: Temperature today')
plt.title('Linear regression')
plt.legend()
plt.show()
w, b = 0.0, 0.0
alpha = 0.001
epochs = 100
losses = []
weights = []
biases = []
for epoch in range(epochs):
dw, db = compute_gradients(X, y, w, b)
w -= alpha * dw
b -= alpha * db
loss = rmse(y, predict(X, w, b))
if epoch % 10 == 0:
print(f'Epoch {epoch}, Loss: {loss:.4f}, w: {w:.4f}, b: {b:.4f}')
losses.append(loss)
weights.append(w)
biases.append(b)
# Plot the parameter trajectories
plt.plot(weights, biases, marker='o')
plt.xlabel('Weight (w)')
plt.ylabel('Bias (b)')
plt.title('Parameter Trajectory')
plt.grid()
plt.show()
W, B = np.meshgrid(np.linspace(-3, 3, 100), np.linspace(-3, 3, 100))
Z = np.array([rmse(y, predict(X, w, b)) for w, b in zip(np.ravel(W), np.ravel(B))])
Z = Z.reshape(W.shape)
plt.contourf(W, B, Z, levels=50, cmap='viridis')
plt.colorbar(label='RMSE')
plt.scatter(weights, biases, color='red', marker='o')
plt.xlabel('Weight (w)')
plt.ylabel('Bias (b)')
plt.title('Loss Surface')
plt.show()
